#include "stdafx.h"

#include "DxEffectMemb.h"

//	Note : 정적 변수 생성.
//
DWORD	DxEffectMemb::m_dwEffect;
DWORD	DxEffectMemb::m_dwEffect2;

/*
char DxEffectMemb::m_strEffect[] =
{
	"vs.1.0	;\n" //

	//;transform position
	"m4x4 oPos, v0, c22	\n"

	//;transform normal
	"m3x3 r0, v3, c10	;\n"

	//;normalize normal	
	"dp3 r0.w, r0, r0	;\n" //
	"rsq r0.w, r0.w		;\n" //
	"mul r0, r0, r0.w	;\n" //

	//;compute world space position
	"m4x3 r1, v0, c10	;\n"
	"mov r1.w, v0.w		;\n"

	//;vector from point to eye
	"add r2, c8, -r1	;\n" //

	//;normalize e
	"dp3 r2.w, r2, r2	;\n" //
	"rsq r2.w, r2.w		;\n" //
	"mul r2, r2, r2.w	;\n" //


	//; eye dot n
	"dp3 r1, r2, r0		;\n" //
	"add oT0.x, r1, c29	;\n" //	; add const offset held in c[20]
	//			;  This animates tex coords without requiring an update
	//			;  of the vertex buffer data.
};
*/

DWORD	DxEffectMemb::dwMemVertexShader[] = {
	0xfffe0100, 0x0003fffe, 0x454c4946, 0x2e6d656d,
	0x00687376, 0x0002fffe, 0x454e494c, 0x00000001,
	0x0002fffe, 0x454e494c, 0x00000002, 0x0002fffe,
	0x454e494c, 0x00000003, 0x0002fffe, 0x454e494c,
	0x00000004, 0x0002fffe, 0x454e494c, 0x00000004,
	0x00000014, 0xc00f0000, 0x90e40000, 0xa0e40016,
	0x0002fffe, 0x454e494c, 0x00000005, 0x0002fffe,
	0x454e494c, 0x00000006, 0x0002fffe, 0x454e494c,
	0x00000007, 0x0002fffe, 0x454e494c, 0x00000007,
	0x00000017, 0x800f0000, 0x90e40003, 0xa0e4000a,
	0x0002fffe, 0x454e494c, 0x00000008, 0x0002fffe,
	0x454e494c, 0x00000009, 0x0002fffe, 0x454e494c,
	0x0000000a, 0x0002fffe, 0x454e494c, 0x0000000a,
	0x00000008, 0x80080000, 0x80e40000, 0x80e40000,
	0x0002fffe, 0x454e494c, 0x0000000b, 0x0002fffe,
	0x454e494c, 0x0000000b, 0x00000007, 0x80080000,
	0x80ff0000, 0x0002fffe, 0x454e494c, 0x0000000c,
	0x0002fffe, 0x454e494c, 0x0000000c, 0x00000005,
	0x800f0000, 0x80e40000, 0x80ff0000, 0x0002fffe,
	0x454e494c, 0x0000000d, 0x0002fffe, 0x454e494c,
	0x0000000e, 0x0002fffe, 0x454e494c, 0x0000000f,
	0x0002fffe, 0x454e494c, 0x0000000f, 0x00000015,
	0x800f0001, 0x90e40000, 0xa0e4000a, 0x0002fffe,
	0x454e494c, 0x00000010, 0x0002fffe, 0x454e494c,
	0x00000010, 0x00000001, 0x80080001, 0x90ff0000,
	0x0002fffe, 0x454e494c, 0x00000011, 0x0002fffe,
	0x454e494c, 0x00000011, 0x00000002, 0x800f0002,
	0xa0e40008, 0x81e40001, 0x0002fffe, 0x454e494c,
	0x00000012, 0x0002fffe, 0x454e494c, 0x00000012,
	0x00000008, 0x80080002, 0x80e40002, 0x80e40002,
	0x0002fffe, 0x454e494c, 0x00000013, 0x0002fffe,
	0x454e494c, 0x00000013, 0x00000007, 0x80080002,
	0x80ff0002, 0x0002fffe, 0x454e494c, 0x00000014,
	0x0002fffe, 0x454e494c, 0x00000014, 0x00000005,
	0x800f0002, 0x80e40002, 0x80ff0002, 0x0002fffe,
	0x454e494c, 0x00000015, 0x0002fffe, 0x454e494c,
	0x00000016, 0x0002fffe, 0x454e494c, 0x00000016,
	0x00000008, 0x800f0001, 0x80e40002, 0x80e40000,
	0x0002fffe, 0x454e494c, 0x00000017, 0x0002fffe,
	0x454e494c, 0x00000017, 0x00000002, 0xe0010000,
	0x80e40001, 0xa0e4001d, 0x0000ffff
};

/*
char DxEffectMemb::m_strEffect2[] =
{
	"vs.1.0	;\n" //

	//;transform position
	"m4x4 oPos, v0, c22	\n"

	//;transform normal
	"m3x3 r0, v3, c10	;\n"

	//;normalize normal	
	"dp3 r0.w, r0, r0	;\n" //
	"rsq r0.w, r0.w		;\n" //
	"mul r0, r0, r0.w	;\n" //

	//;compute world space position
	"m4x3 r1, v0, c10	;\n"
	"mov r1.w, v0.w		;\n"

	//;vector from point to eye
	"add r2, c8, -r1	;\n" //

	//;normalize e
	"dp3 r2.w, r2, r2	;\n" //
	"rsq r2.w, r2.w		;\n" //
	"mul r2, r2, r2.w	;\n" //


	//;-------------------------------------------------------------------- 
	//;		Diffuse 칼라를 생성
	
	//; The directional light source.
	"dp3 r4.x, r0, -c0		\n" //

	"mul r5, r4.x, c1		\n" //	빛 디퓨즈 와 각도
	"mul r1, r5, c26		\n" //	빛 디퓨즈 와 각도 & 매트리얼 디퓨즈
	"max r1.xyz, r1.xyz, c28.x	\n"
	"add r1.xyz, r1.xyz, c27		\n" //	빛 디퓨즈 와 각도 & 매트리얼 디퓨즈 & 엠뷰언트

	//	Note : 스페큘러 시작.
	//
	"dp3 r2, v0, c10	\n"
	// 카메라에서 점까지
	"add r2, -r2, c8	\n"
	"dp3 r2.w, r2, r2	\n" 
	"rsq r2.w, r2.w		\n" 
	"mul r2, r2, r2.w	\n" 

	// 위에 구한 값과 빛을 더해서 값을 얻는다.		Half
	"add r2, r2, -c0	\n"
	"dp3 r2.w, r2, r2	\n" 
	"rsq r2.w, r2.w		\n" 
	"mul r2, r2, r2.w	\n" 

	"dp3 r3.x, r2, r0		\n"		// 1 ~ -1		노멀과 Half 내적 한다.

	"mul r3.y, r3.x, r3.x		\n"	// ^2
	"mul r3.x, r3.y, r3.y		\n"	// ^4
	"mul r3.x, r3.x, r3.x		\n"	// ^16
	"mul r3.x, r3.x, r3.y		\n"	// ^32

	//	"mul r2, r2, X		\n"		//	X 는 물체의 스페큘러 값
	"mul r2.xyzw, r3.x, c28.z	\n"		// 내적^32 나온것과 스페큘러 값을 곱한다.

	"add oD0, r1, r2	\n" //



	"mov oT0,	v7	\n"

	//; eye dot n
	"dp3 r1, r2, r0		;\n" //
	"add oT1.x, r1, c29	;\n" //	; add const offset held in c[20]
	//			;  This animates tex coords without requiring an update
	//			;  of the vertex buffer data.
};
*/

DWORD	DxEffectMemb::dwMem2VertexShader[] = {
	0xfffe0100, 0x0004fffe, 0x454c4946, 0x326d656d,
	0x6873762e, 0x6d656d00, 0x0002fffe, 0x454e494c,
	0x00000001, 0x0002fffe, 0x454e494c, 0x00000002,
	0x0002fffe, 0x454e494c, 0x00000003, 0x0002fffe,
	0x454e494c, 0x00000004, 0x0002fffe, 0x454e494c,
	0x00000004, 0x00000014, 0xc00f0000, 0x90e40000,
	0xa0e40016, 0x0002fffe, 0x454e494c, 0x00000005,
	0x0002fffe, 0x454e494c, 0x00000006, 0x0002fffe,
	0x454e494c, 0x00000007, 0x0002fffe, 0x454e494c,
	0x00000007, 0x00000017, 0x800f0000, 0x90e40003,
	0xa0e4000a, 0x0002fffe, 0x454e494c, 0x00000008,
	0x0002fffe, 0x454e494c, 0x00000009, 0x0002fffe,
	0x454e494c, 0x0000000a, 0x0002fffe, 0x454e494c,
	0x0000000a, 0x00000008, 0x80080000, 0x80e40000,
	0x80e40000, 0x0002fffe, 0x454e494c, 0x0000000b,
	0x0002fffe, 0x454e494c, 0x0000000b, 0x00000007,
	0x80080000, 0x80ff0000, 0x0002fffe, 0x454e494c,
	0x0000000c, 0x0002fffe, 0x454e494c, 0x0000000c,
	0x00000005, 0x800f0000, 0x80e40000, 0x80ff0000,
	0x0002fffe, 0x454e494c, 0x0000000d, 0x0002fffe,
	0x454e494c, 0x0000000e, 0x0002fffe, 0x454e494c,
	0x0000000f, 0x0002fffe, 0x454e494c, 0x0000000f,
	0x00000015, 0x800f0001, 0x90e40000, 0xa0e4000a,
	0x0002fffe, 0x454e494c, 0x00000010, 0x0002fffe,
	0x454e494c, 0x00000010, 0x00000001, 0x80080001,
	0x90ff0000, 0x0002fffe, 0x454e494c, 0x00000011,
	0x0002fffe, 0x454e494c, 0x00000012, 0x0002fffe,
	0x454e494c, 0x00000013, 0x0002fffe, 0x454e494c,
	0x00000013, 0x00000002, 0x800f0002, 0xa0e40008,
	0x81e40001, 0x0002fffe, 0x454e494c, 0x00000014,
	0x0002fffe, 0x454e494c, 0x00000015, 0x0002fffe,
	0x454e494c, 0x00000016, 0x0002fffe, 0x454e494c,
	0x00000016, 0x00000008, 0x80080002, 0x80e40002,
	0x80e40002, 0x0002fffe, 0x454e494c, 0x00000017,
	0x0002fffe, 0x454e494c, 0x00000017, 0x00000007,
	0x80080002, 0x80ff0002, 0x0002fffe, 0x454e494c,
	0x00000018, 0x0002fffe, 0x454e494c, 0x00000018,
	0x00000005, 0x800f0002, 0x80e40002, 0x80ff0002,
	0x0002fffe, 0x454e494c, 0x00000019, 0x0002fffe,
	0x454e494c, 0x0000001a, 0x0002fffe, 0x454e494c,
	0x0000001b, 0x0002fffe, 0x454e494c, 0x0000001b,
	0x00000008, 0x80010004, 0x80e40000, 0xa1e40000,
	0x0002fffe, 0x454e494c, 0x0000001c, 0x0002fffe,
	0x454e494c, 0x0000001d, 0x0002fffe, 0x454e494c,
	0x0000001d, 0x00000005, 0x800f0005, 0x80000004,
	0xa0e40001, 0x0002fffe, 0x454e494c, 0x0000001e,
	0x0002fffe, 0x454e494c, 0x0000001e, 0x00000005,
	0x800f0001, 0x80e40005, 0xa0e4001a, 0x0002fffe,
	0x454e494c, 0x0000001f, 0x0002fffe, 0x454e494c,
	0x0000001f, 0x0000000b, 0x80070001, 0x80a40001,
	0xa000001c, 0x0002fffe, 0x454e494c, 0x00000020,
	0x0002fffe, 0x454e494c, 0x00000020, 0x00000002,
	0x80070001, 0x80a40001, 0xa0e4001b, 0x0002fffe,
	0x454e494c, 0x00000021, 0x0002fffe, 0x454e494c,
	0x00000022, 0x0002fffe, 0x454e494c, 0x00000023,
	0x0002fffe, 0x454e494c, 0x00000023, 0x00000008,
	0x800f0002, 0x90e40000, 0xa0e4000a, 0x0002fffe,
	0x454e494c, 0x00000024, 0x0002fffe, 0x454e494c,
	0x00000025, 0x0002fffe, 0x454e494c, 0x00000025,
	0x00000002, 0x800f0002, 0x81e40002, 0xa0e40008,
	0x0002fffe, 0x454e494c, 0x00000026, 0x0002fffe,
	0x454e494c, 0x00000026, 0x00000008, 0x80080002,
	0x80e40002, 0x80e40002, 0x0002fffe, 0x454e494c,
	0x00000027, 0x0002fffe, 0x454e494c, 0x00000027,
	0x00000007, 0x80080002, 0x80ff0002, 0x0002fffe,
	0x454e494c, 0x00000028, 0x0002fffe, 0x454e494c,
	0x00000028, 0x00000005, 0x800f0002, 0x80e40002,
	0x80ff0002, 0x0002fffe, 0x454e494c, 0x00000029,
	0x0002fffe, 0x454e494c, 0x0000002a, 0x0002fffe,
	0x454e494c, 0x0000002b, 0x0002fffe, 0x454e494c,
	0x0000002b, 0x00000002, 0x800f0002, 0x80e40002,
	0xa1e40000, 0x0002fffe, 0x454e494c, 0x0000002c,
	0x0002fffe, 0x454e494c, 0x0000002c, 0x00000008,
	0x80080002, 0x80e40002, 0x80e40002, 0x0002fffe,
	0x454e494c, 0x0000002d, 0x0002fffe, 0x454e494c,
	0x0000002d, 0x00000007, 0x80080002, 0x80ff0002,
	0x0002fffe, 0x454e494c, 0x0000002e, 0x0002fffe,
	0x454e494c, 0x0000002e, 0x00000005, 0x800f0002,
	0x80e40002, 0x80ff0002, 0x0002fffe, 0x454e494c,
	0x0000002f, 0x0002fffe, 0x454e494c, 0x00000030,
	0x0002fffe, 0x454e494c, 0x00000030, 0x00000008,
	0x80010003, 0x80e40002, 0x80e40000, 0x0002fffe,
	0x454e494c, 0x00000031, 0x0002fffe, 0x454e494c,
	0x00000032, 0x0002fffe, 0x454e494c, 0x00000032,
	0x00000005, 0x80020003, 0x80000003, 0x80000003,
	0x0002fffe, 0x454e494c, 0x00000033, 0x0002fffe,
	0x454e494c, 0x00000033, 0x00000005, 0x80010003,
	0x80550003, 0x80550003, 0x0002fffe, 0x454e494c,
	0x00000034, 0x0002fffe, 0x454e494c, 0x00000034,
	0x00000005, 0x80010003, 0x80000003, 0x80000003,
	0x0002fffe, 0x454e494c, 0x00000035, 0x0002fffe,
	0x454e494c, 0x00000035, 0x00000005, 0x80010003,
	0x80000003, 0x80550003, 0x0002fffe, 0x454e494c,
	0x00000036, 0x0002fffe, 0x454e494c, 0x00000037,
	0x0002fffe, 0x454e494c, 0x00000038, 0x0002fffe,
	0x454e494c, 0x00000038, 0x00000005, 0x800f0002,
	0x80000003, 0xa0aa001c, 0x0002fffe, 0x454e494c,
	0x00000039, 0x0002fffe, 0x454e494c, 0x00000039,
	0x00000002, 0xd00f0000, 0x80e40001, 0x80e40002,
	0x0002fffe, 0x454e494c, 0x0000003a, 0x0002fffe,
	0x454e494c, 0x0000003b, 0x0002fffe, 0x454e494c,
	0x0000003c, 0x0002fffe, 0x454e494c, 0x0000003c,
	0x00000001, 0xe00f0000, 0x90e40007, 0x0002fffe,
	0x454e494c, 0x0000003d, 0x0002fffe, 0x454e494c,
	0x0000003e, 0x0002fffe, 0x454e494c, 0x0000003e,
	0x00000008, 0x800f0001, 0x80e40002, 0x80e40000,
	0x0002fffe, 0x454e494c, 0x0000003f, 0x0002fffe,
	0x454e494c, 0x0000003f, 0x00000002, 0xe0010001,
	0x80e40001, 0xa0e4001d, 0x0000ffff
};

DWORD	DxEffectMemb::m_dwSavedStateBlock(0x00000000);
DWORD	DxEffectMemb::m_dwEffectStateBlock(0x00000000);